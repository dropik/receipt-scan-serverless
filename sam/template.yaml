AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Serverless application for scanning and categorizing receipts

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Handler: bootstrap
    Runtime: provided.al2
    RuntimeManagementConfig:
      UpdateRuntimeOn: Manual
      RuntimeVersionArn: arn:aws:lambda:eu-central-1::runtime:c2f9d23694707c1161c0d3fbc0673f4ee14150265f4f3081161948aa71fad0a0
    Architectures:
      - arm64

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stage
      - prod

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      DeletionProtection: ACTIVE
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - Name: email
          Required: true
          Mutable: true

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AWS::StackName}"
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolDefaultClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}-user-pool-client"
      UserPoolId: !Ref CognitoUserPool
      AccessTokenValidity: 60
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - "https://localhost:4200"
      DefaultRedirectURI: "https://localhost:4200"
      EnableTokenRevocation: true
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      GenerateSecret: false
      IdTokenValidity: 60
      LogoutURLs:
        - "https://localhost:4200"
      RefreshTokenValidity: 1440
      SupportedIdentityProviders:
        - COGNITO
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: minutes

  RESTApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: Stage
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            AuthorizationScopes:
              - "email"
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Authorization

  ImagesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${AWS::StackName}-images-bucket"

  LApi:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: api/
      FunctionName: !Sub "receipt-scan-api-${Stage}"
      Environment:
        Variables:
          IMAGES_BUCKET: !Ref ImagesBucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId:
              Ref: RESTApi
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: SystemsManager
              Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
                - "ssm:GetParameterByPath"
              Resource:
                - "*"
            - Sid: S3Access
              Effect: Allow
              Action:
                - "s3:PutObject"
              Resource:
                - !Sub "arn:aws:s3:::${ImagesBucket}"
                - !Sub "arn:aws:s3:::${ImagesBucket}/*"

  LScanner:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: scanner/
      FunctionName: !Sub "receipt-scan-scanner-${Stage}"
      Events:
        Analyze:
          Type: S3
          Properties:
            Bucket: !Ref ImagesBucket
            Events:
              - s3:ObjectCreated:*
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: SystemsManager
              Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
                - "ssm:GetParameterByPath"
              Resource:
                - "*"
            - Sid: S3Access
              Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - !Sub "arn:aws:s3:::${AWS::StackName}-images-bucket/*"
            - Sid: Textract
              Effect: Allow
              Action:
                - "textract:AnalyzeExpense"
              Resource:
                - "*"
            - Sid: Bedrock
              Effect: Allow
              Action:
                - "bedrock:InvokeModel"
              Resource:
                - "*"

Outputs:
  API:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${RESTApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
